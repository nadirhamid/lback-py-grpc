# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import shared_pb2 as shared__pb2


class ServerStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RouteBackup = channel.unary_unary(
        '/lbackgrpc.Server/RouteBackup',
        request_serializer=shared__pb2.BackupCmd.SerializeToString,
        response_deserializer=shared__pb2.BackupCmdStatus.FromString,
        )
    self.RouteRelocate = channel.unary_unary(
        '/lbackgrpc.Server/RouteRelocate',
        request_serializer=shared__pb2.RelocateCmd.SerializeToString,
        response_deserializer=shared__pb2.RelocateCmdStatus.FromString,
        )
    self.RouteRestore = channel.unary_unary(
        '/lbackgrpc.Server/RouteRestore',
        request_serializer=shared__pb2.RestoreCmd.SerializeToString,
        response_deserializer=shared__pb2.RestoreCmdStatus.FromString,
        )
    self.RouteRm = channel.unary_stream(
        '/lbackgrpc.Server/RouteRm',
        request_serializer=shared__pb2.RmCmd.SerializeToString,
        response_deserializer=shared__pb2.RmCmdStatus.FromString,
        )


class ServerServicer(object):
  """Interface exported by the server.
  """

  def RouteBackup(self, request, context):
    """A Bidirectional streaming RPC.

    Accepts a stream of RouteNotes sent while a route is being traversed,
    while receiving other RouteNotes (e.g. from other users).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RouteRelocate(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RouteRestore(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RouteRm(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RouteBackup': grpc.unary_unary_rpc_method_handler(
          servicer.RouteBackup,
          request_deserializer=shared__pb2.BackupCmd.FromString,
          response_serializer=shared__pb2.BackupCmdStatus.SerializeToString,
      ),
      'RouteRelocate': grpc.unary_unary_rpc_method_handler(
          servicer.RouteRelocate,
          request_deserializer=shared__pb2.RelocateCmd.FromString,
          response_serializer=shared__pb2.RelocateCmdStatus.SerializeToString,
      ),
      'RouteRestore': grpc.unary_unary_rpc_method_handler(
          servicer.RouteRestore,
          request_deserializer=shared__pb2.RestoreCmd.FromString,
          response_serializer=shared__pb2.RestoreCmdStatus.SerializeToString,
      ),
      'RouteRm': grpc.unary_stream_rpc_method_handler(
          servicer.RouteRm,
          request_deserializer=shared__pb2.RmCmd.FromString,
          response_serializer=shared__pb2.RmCmdStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'lbackgrpc.Server', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
