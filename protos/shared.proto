// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
package lbackgrpc;

// Send BackupChunks from client to server to agents
message BackupCmdStream {
  // The location from which the message is sent.
  string id = 1;
  bytes raw_data = 2;
  string shard = 3;
  string folder = 4;
}
message BackupCmd {
  // The location from which the message is sent.
  string id = 1;
  string temp_id = 2;
  repeated string agent_ids = 3;
}

message BackupCmdStatus {
  int32 elapsed_time = 1;
  bool errored = 2;
}
message RestoreCmd {
  // The location from which the message is sent.
  string id = 1;
  string folder = 2;
  bool use_temp_folder = 3;
  string shard = 4;
  bool skip_run = 5;
  string target = 6;
}
message RestoreCmdStatus {
  // The location from which the message is sent.
  int32 elapsed_time = 1;
  bytes raw_data = 2;
  bool errored = 3;
}

message RestoreAcceptCmd {
   string id = 1;
   bytes raw_data = 2; 
   string folder = 3;
}

message RestoreAcceptCmdStatus {
  int32 elapsed_time = 1;
  bool errored = 2;
}

message RelocateCmd {
  // The location from which the message is sent.
  string id = 1;
  string src = 2;
  string dst = 3;
  string shard = 4;
}

message RelocateCmdTake {
  string id = 1;
  string folder = 2;
  string shard = 3;
}

message RelocateCmdGiveStream {
  // The location from which the message is sent.
  string id = 1;
  string folder = 2;
  bytes raw_data = 3;
  string shard = 4;
}
message RelocateCmdStatus {
  int32 elapsed_time = 1;
  bool errored = 2;
}

message RelocateCmdTakeStatus {
  int32 elapsed_time = 1;
  bytes raw_data = 2;
  bool errored  = 3;
}

message RelocateCmdGiveStatus {
  // The location from which the message is sent.
  bool errored = 1;
}

message RmCmd {
  // The location from which the message is sent.
  string id = 1;
  string target = 2;
  bool all = 3;
  string shard = 4;
}

message RmCmdStatus {
  int32 elapsed_time = 1;
  bool errored = 2;
}

message CheckCmd {
   string id =1;
   string shard = 2;
}

message CheckCmdStatus {
   bool errored = 1;
}
